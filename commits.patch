From 698ccebd08466169bcfe7555d5b6caa9c9d4c214 Mon Sep 17 00:00:00 2001
From: pooja-salpekar <salpekar.pooja4@gmail.com>
Date: Mon, 27 May 2013 18:02:20 +0300
Subject: [PATCH 1/2] added tests for p6 polls

---
 education/models.py                                |   26 +++-
 .../test/test_successful_feedback_for_p6_polls.py  |  131 ++++++++++++++++++++
 education/test/test_util_functions.py              |    1 -
 education/test/utils.py                            |    8 ++
 4 files changed, 159 insertions(+), 7 deletions(-)
 create mode 100644 education/test/test_successful_feedback_for_p6_polls.py

diff --git a/education/models.py b/education/models.py
index fbf4c40..abab6d8 100644
--- a/education/models.py
+++ b/education/models.py
@@ -9,7 +9,7 @@ from eav.models import Attribute
 from education.utils import _schedule_weekly_scripts, _schedule_weekly_scripts_now, _schedule_monthly_script, _schedule_termly_script,\
     _schedule_weekly_report, _schedule_monthly_report, _schedule_midterm_script, _schedule_weekly_script, _schedule_teacher_weekly_scripts,\
     _schedule_new_monthly_script, _schedule_script_now
-from rapidsms_httprouter.models import mass_text_sent
+from rapidsms_httprouter.models import mass_text_sent, Message
 from rapidsms.models import Contact, ContactBase
 from rapidsms.contrib.locations.models import Location
 from poll.models import Poll
@@ -18,6 +18,7 @@ from script.models import *
 from script.utils.handling import find_best_response, find_closest_match
 import re, calendar, datetime, time, reversion
 from poll.models import ResponseCategory, Category
+from education.attendance_diff import calculate_attendance_diff
 import logging
 
 logger = logging.getLogger(__name__)
@@ -549,6 +550,18 @@ def edtrac_scriptrun_schedule(**kwargs):
         s, c = ScriptSchedule.objects.get_or_create(script=script, date__contains=date)
 
 
+def send_feedback_on_complete(**kwargs):
+    connection = kwargs['connection']
+    progress = kwargs['sender']
+    if progress.script.slug == 'edtrac_p3_teachers_weekly':
+        atttd_diff = calculate_attendance_diff(connection, progress)
+        message_string = "Thankyou %s Teacher, Attendance for boys have been %s by %spercent" \
+                         "Attendance for girls have been %s by %spercent" % (
+                         connection.contact.emisreporter.grade, atttd_diff['boysp3'][1], atttd_diff['boysp3'][0], atttd_diff['girlsp3'][1],
+                         atttd_diff['girlsp3'][0])
+        Message.mass_text(message_string, [connection])
+
+
 def reschedule_weekly_polls(grp=None):
     """
     manually reschedule all weekly polls or for a specified group
@@ -736,11 +749,11 @@ def schedule_script_now(grp = 'all', slug=''):
     
     now_script.enabled = True
     grps = Group.objects.filter(name__iexact=grp)
-    reps = EmisReporter.objects.filter(groups__in=grps)
-    for rep in reps:
-        if rep.default_connection and rep.groups.count() > 0:
-            _schedule_script_now(rep.groups.all()[0], rep.default_connection, slug, ['Teachers', 'Head Teachers', 'SMC', 'GEM'])
-    print "Script sent out to " + str(reps.count()) + " reporters"
+    reporters = EmisReporter.objects.filter(groups__in=grps)
+    for reporter in reporters:
+        if reporter.default_connection and reporter.groups.count() > 0:
+            _schedule_script_now(reporter.groups.all()[0], reporter.default_connection, slug, ['Teachers', 'Head Teachers', 'SMC', 'GEM'])
+    print "Script sent out to " + str(reporters.count()) + " reporters"
 
 
 def schedule_weekly_report(grp='DEO'):
@@ -810,6 +823,7 @@ script_progress_was_completed.connect(edtrac_autoreg, weak=False)
 script_progress_was_completed.connect(edtrac_reschedule_script, weak=False)
 script_progress.connect(edtrac_autoreg_transition, weak=False)
 script_progress.connect(edtrac_attendance_script_transition, weak=False)
+script_progress_was_completed.connect(send_feedback_on_complete,weak=True)
 #script_progress.connect(edtrac_scriptrun_schedule, weak=False)
 
 class ScriptScheduleTime(models.Model):
diff --git a/education/test/test_successful_feedback_for_p6_polls.py b/education/test/test_successful_feedback_for_p6_polls.py
new file mode 100644
index 0000000..9166b60
--- /dev/null
+++ b/education/test/test_successful_feedback_for_p6_polls.py
@@ -0,0 +1,131 @@
+# vim: ai ts=4 sts=4 et sw=4 encoding=utf-8
+from unittest import TestCase
+import datetime
+import dateutils
+from django.contrib.auth.models import User, Group
+from education.attendance_diff import calculate_attendance_diff, get_enrolled_boys_and_girls, calculate_attendance_difference_for_p6
+from rapidsms_httprouter.models import Message
+from edtrac_project import settings
+from education.models import EmisReporter, School, schedule_script_now
+from education.test.utils import create_location_type, create_location, create_group, create_user_with_group, create_school, create_emis_reporters, create_poll_with_reporters, fake_incoming
+from poll.models import Poll
+from rapidsms.contrib.locations.models import Location, LocationType
+from script.models import Script, ScriptStep, ScriptProgress, ScriptSession
+from script.utils.outgoing import check_progress
+
+
+class TestSuccessFulFeedbackToP6Polls(TestCase):
+
+    def setUp(self):
+        country = create_location_type("country")
+        uganda_fields = {
+            "rght": 15274,
+            "level": 0,
+            "tree_id": 1,
+            "lft": 1,
+        }
+        self.uganda = create_location("uganda", country, **uganda_fields)
+        admin_group = create_group("Admins")
+        self.admin_user = create_user_with_group("John", admin_group, self.uganda)
+
+        district = create_location_type("district")
+        kampala_fields = {
+            "rght": 10901,
+            "tree_parent": self.uganda,
+            "level": 1,
+            "tree_id": 1,
+            "lft": 10686,
+        }
+        kampala_point = {
+            "latitude": "0.3162800000",
+            "longitude": "32.5821900000"
+        }
+        self.kampala_district = create_location("Kampala", district, point=kampala_point, **kampala_fields)
+        self.kampala_school = create_school("St. Joseph's", self.kampala_district)
+        self.head_teacher_group = create_group("Head Teachers")
+        self.emis_reporter1 = create_emis_reporters("dummy1", self.kampala_district, self.kampala_school, 12345,
+                                                    self.head_teacher_group)
+        self.emis_reporter1.grade = 'P6'
+        self.emis_reporter1.save()
+        self.emis_reporter2 = create_emis_reporters("dummy2", self.kampala_district, self.kampala_school, 12346,
+                                                    self.head_teacher_group)
+        self.emis_reporter2.grade = 'P6'
+        self.emis_reporter2.save()
+
+        self.p6_boys_absent_poll = create_poll_with_reporters("edtrac_boysp6_attendance",
+                                                              "How many P6 boys are at school today?",
+                                                              Poll.TYPE_NUMERIC, self.admin_user,
+                                                              [self.emis_reporter1, self.emis_reporter2])
+        self.p6_girls_absent_poll = create_poll_with_reporters("edtrac_girlsp6_attendance",
+                                                               "How many P6 girls are at school today?",
+                                                               Poll.TYPE_NUMERIC, self.admin_user,
+                                                               [self.emis_reporter1, self.emis_reporter2])
+
+        self.teachers_weekly_script = Script.objects.create(name='Revised P6 Teachers Weekly Script',
+                                                            slug='edtrac_p6_teachers_weekly')
+        self.p6_boys_attendance_step = ScriptStep.objects.create(script=self.teachers_weekly_script,
+                                                                 poll=self.p6_boys_absent_poll,
+                                                                 order=0, rule=ScriptStep.WAIT_MOVEON, start_offset=0,
+                                                                 giveup_offset=7200)
+        self.teachers_weekly_script.steps.add(
+            self.p6_boys_attendance_step)
+        self.p6_girls_attendance_step = ScriptStep.objects.create(script=self.teachers_weekly_script,
+                                                                  poll=self.p6_girls_absent_poll,
+                                                                  order=1, rule=ScriptStep.WAIT_MOVEON, start_offset=0,
+                                                                  giveup_offset=7200)
+        self.teachers_weekly_script.steps.add(
+            self.p6_girls_attendance_step)
+        self.p6_boys_enroll_poll = create_poll_with_reporters("edtrac_boysp6_enrollment",
+                                                              "How many boys are enrolled in P6 this term?",
+                                                              Poll.TYPE_NUMERIC, self.admin_user,
+                                                              [self.emis_reporter1])
+        self.p6_girls_enroll_poll = create_poll_with_reporters("edtrac_girlsp6_enrollment",
+                                                               "How many girls are enrolled in P6 this term?",
+                                                               Poll.TYPE_NUMERIC, self.admin_user,
+                                                               [self.emis_reporter1])
+
+        self.head_teachers_termly_script = Script.objects.create(name='P6 Enrollment Headteacher Termly Script',
+                                                                 slug='edtrac_p6_enrollment_headteacher_termly')
+        self.head_teachers_termly_script.steps.add(
+            ScriptStep.objects.create(script=self.head_teachers_termly_script, poll=self.p6_boys_enroll_poll, order=0,
+                                      rule=ScriptStep.WAIT_MOVEON, start_offset=0, giveup_offset=7200))
+
+        self.head_teachers_termly_script.steps.add(
+            ScriptStep.objects.create(script=self.head_teachers_termly_script, poll=self.p6_girls_enroll_poll, order=1,
+                                      rule=ScriptStep.WAIT_MOVEON, start_offset=0, giveup_offset=7200))
+        settings.SCHOOL_TERM_START = dateutils.increment(datetime.datetime.today(), weeks=-4)
+        settings.SCHOOL_TERM_END = dateutils.increment(datetime.datetime.today(), weeks=8)
+
+
+    def test_should_calculate_difference_in_attendance_for_this_and_past_week(self):
+        schedule_script_now(grp=self.head_teacher_group.name,slug=self.head_teachers_termly_script.slug)
+        check_progress(self.head_teachers_termly_script)
+        fake_incoming("10",self.emis_reporter1)
+        check_progress(self.head_teachers_termly_script)
+        fake_incoming("10",self.emis_reporter1)
+        schedule_script_now(grp=self.head_teacher_group.name,slug = self.teachers_weekly_script.slug)
+        check_progress(self.teachers_weekly_script)
+        fake_incoming("4",self.emis_reporter1)
+        progress = ScriptProgress.objects.create(script=self.teachers_weekly_script,
+                                                 connection=self.emis_reporter1.connection_set.all()[0],
+                                                 step=self.p6_boys_attendance_step)
+        attendance_difference = calculate_attendance_difference_for_p6(self.emis_reporter1.connection_set.all()[0], progress)
+
+        self.assertEqual(40,attendance_difference['boysp6'][0])
+        self.assertEqual("improved",attendance_difference['boysp6'][1])
+
+    def tearDown(self):
+        Message.objects.all().delete()
+        ScriptProgress.objects.all().delete()
+        ScriptStep.objects.all().delete()
+        ScriptSession.objects.all().delete()
+        Script.objects.all().delete()
+        Poll.objects.all().delete()
+        EmisReporter.objects.all().delete()
+        Location.objects.all().delete()
+        LocationType.objects.all().delete()
+        School.objects.all().delete()
+        User.objects.all().delete()
+        Group.objects.all().delete()
+
+
diff --git a/education/test/test_util_functions.py b/education/test/test_util_functions.py
index f7c0314..59cfe7a 100644
--- a/education/test/test_util_functions.py
+++ b/education/test/test_util_functions.py
@@ -1,7 +1,6 @@
 # vim: ai ts=4 sts=4 et sw=4 encoding=utf-8
 from datetime import datetime
 from unittest import TestCase
-from dateutil.relativedelta import relativedelta
 import dateutils
 from education.utils import get_week_count, get_months
 
diff --git a/education/test/utils.py b/education/test/utils.py
index 78ec5cf..91c8127 100644
--- a/education/test/utils.py
+++ b/education/test/utils.py
@@ -1,4 +1,5 @@
 # vim: ai ts=4 sts=4 et sw=4 encoding=utf-8
+import datetime
 from django.contrib.auth.models import User
 from django.http import HttpRequest
 from eav.models import Attribute
@@ -6,6 +7,8 @@ from education.models import Role, School, UserProfile, EmisReporter
 from poll.models import Poll
 from rapidsms.contrib.locations.models import LocationType, Location, Point
 from rapidsms.models import Backend
+from rapidsms_httprouter.router import get_router
+from script.models import ScriptSession
 
 
 def create_user_with_group(username,group=None, location=None):
@@ -79,3 +82,8 @@ def create_attribute():
         "name": "Number"
     }
     Attribute.objects.create(**params)
+
+def fake_incoming(message, reporter):
+    router = get_router()
+    connection = reporter.default_connection
+    return router.handle_incoming(connection.backend.name, connection.identity, message)
-- 
1.7.5.4


From 010df379ffd7b520030b6e352ed3b51f6e12dd6c Mon Sep 17 00:00:00 2001
From: pooja-salpekar <salpekar.pooja4@gmail.com>
Date: Mon, 27 May 2013 18:06:27 +0300
Subject: [PATCH 2/2] added tests for p6 polls results and implementation

---
 education/attendance_diff.py                       |  138 ++++++++++++++++++++
 .../test/test_successful_feedbacks_to_polls.py     |  132 +++++++++++++++++++
 2 files changed, 270 insertions(+), 0 deletions(-)
 create mode 100644 education/attendance_diff.py
 create mode 100644 education/test/test_successful_feedbacks_to_polls.py

diff --git a/education/attendance_diff.py b/education/attendance_diff.py
new file mode 100644
index 0000000..6d84bc6
--- /dev/null
+++ b/education/attendance_diff.py
@@ -0,0 +1,138 @@
+# vim: ai ts=4 sts=4 et sw=4 encoding=utf-8
+import dateutils
+from django.conf import settings
+from education.utils import _this_thursday
+from poll.models import Response
+
+
+def get_attd_diff(boys_absent_percent_previous_week, boys_absent_percent_this_week):
+    if boys_absent_percent_this_week > boys_absent_percent_previous_week:
+        return (boys_absent_percent_this_week - boys_absent_percent_previous_week), 'dropped'
+    return (boys_absent_percent_previous_week - boys_absent_percent_this_week), 'improved'
+
+
+def calculate_attendance_diff(connection,progress):
+    boys_absent_percent_previous_week =0
+    boys_absent_percent_this_week =0
+    girls_absent_percent_previous_week =0
+    girls_absent_percent_this_week =0
+    boys_enrolled , girls_enrolled = get_enrolled_boys_and_girls(connection)
+    this_thursday = _this_thursday()
+    current_week = [dateutils.increment(this_thursday,days=-7),dateutils.increment(this_thursday,days=-1)]
+    previous_week = [dateutils.increment(this_thursday,days=-14),dateutils.increment(this_thursday,days=-8)]
+    for step in progress.script.steps.all():
+        present_this_week = Response.objects.filter(poll= step.poll,contact__connection=connection,date__range=current_week)
+        if present_this_week.exists():
+            present_this_week = int(present_this_week.latest('date').message.text)
+        else:
+            present_this_week = 0
+
+        present_previous_week = Response.objects.filter(poll= step.poll,contact__connection=connection,date__range=previous_week)
+        if present_previous_week.exists():
+            present_previous_week= int(present_previous_week.latest('date').message.text)
+        else:
+            present_previous_week = 0
+
+        if step.poll.name == 'edtrac_boysp3_attendance':
+            boys_absent_percent_this_week = calculate_percent((boys_enrolled-present_this_week),boys_enrolled)
+            boys_absent_percent_previous_week = calculate_percent((boys_enrolled-present_previous_week),boys_enrolled)
+
+        if step.poll.name == 'edtrac_girlsp3_attendance':
+            girls_absent_percent_this_week = calculate_percent((girls_enrolled-present_this_week),girls_enrolled)
+            girls_absent_percent_previous_week = calculate_percent((girls_enrolled-present_previous_week),girls_enrolled)
+
+    boys_attd_diff =  get_attd_diff(boys_absent_percent_previous_week, boys_absent_percent_this_week)
+    girls_attd_diff =  get_attd_diff(girls_absent_percent_previous_week, girls_absent_percent_this_week)
+
+    return dict(boysp3 = boys_attd_diff , girlsp3 = girls_attd_diff)
+
+def calculate_attendance_difference_for_p6(connection,progress):
+    boys_absent_percent_previous_week =0
+    boys_absent_percent_this_week =0
+    girls_absent_percent_previous_week =0
+    girls_absent_percent_this_week =0
+    boys_enrolled , girls_enrolled = get_enrolled_p6_boys_and_girls(connection)
+    print 'Boys enrolled : '+ str(girls_enrolled)
+    this_thursday = _this_thursday()
+    current_week = [dateutils.increment(this_thursday,days=-7),dateutils.increment(this_thursday,days=-1)]
+    previous_week = [dateutils.increment(this_thursday,days=-14),dateutils.increment(this_thursday,days=-8)]
+    for step in progress.script.steps.all():
+        present_this_week = Response.objects.filter(poll= step.poll,contact__connection=connection,date__range=current_week)
+        if present_this_week.exists():
+            present_this_week = int(present_this_week.latest('date').message.text)
+            print step.poll.name + ' : '+str(present_this_week)
+        else:
+            present_this_week = 0
+        present_previous_week = Response.objects.filter(poll= step.poll,contact__connection=connection,date__range=previous_week)
+        if present_previous_week.exists():
+            present_previous_week= int(present_previous_week.latest('date').message.text)
+        else:
+            present_previous_week = 0
+
+        if step.poll.name == 'edtrac_boysp6_attendance':
+            boys_absent_percent_this_week = calculate_percent((boys_enrolled-present_this_week),boys_enrolled)
+            boys_absent_percent_previous_week = calculate_percent((boys_enrolled-present_previous_week),boys_enrolled)
+
+
+        if step.poll.name == 'edtrac_girlsp6_attendance':
+            girls_absent_percent_this_week = calculate_percent((girls_enrolled-present_this_week),girls_enrolled)
+            girls_absent_percent_previous_week = calculate_percent((girls_enrolled-present_previous_week),girls_enrolled)
+
+
+
+    boys_attd_diff =  get_attd_diff(boys_absent_percent_previous_week, boys_absent_percent_this_week)
+    girls_attd_diff =  get_attd_diff(girls_absent_percent_previous_week, girls_absent_percent_this_week)
+
+
+    return dict(boysp6 = boys_attd_diff , girlsp6 = girls_attd_diff)
+
+
+
+def calculate_percent(numerator, denominator):
+    try:
+        return 100 * numerator/denominator
+    except ZeroDivisionError:
+        return 0
+
+def get_enrolled_boys_and_girls(connection):
+    term_start = getattr(settings, "SCHOOL_TERM_START")
+    term_end = getattr(settings, "SCHOOL_TERM_END")
+    boys_enrolled = Response.objects.filter(poll__name="edtrac_boysp3_enrollment", contact__connection=connection,
+                                            date__range=[term_start, term_end])
+    if boys_enrolled.exists():
+        boys_enrolled = int(boys_enrolled.latest('date').message.text)
+    else:
+        boys_enrolled = 0
+
+    girls_enrolled = Response.objects.filter(poll__name="edtrac_girlsp3_enrollment", contact__connection=connection,
+                                             date__range=[term_start, term_end])
+    if girls_enrolled.exists():
+        girls_enrolled = int(girls_enrolled.latest('date').message.text)
+    else:
+        girls_enrolled = 0
+
+    return boys_enrolled , girls_enrolled
+
+def get_enrolled_p6_boys_and_girls(connection):
+    term_start = getattr(settings, "SCHOOL_TERM_START")
+    term_end = getattr(settings, "SCHOOL_TERM_END")
+    # I removed the start term and end term date range and it worked. we need to look at the settings and make sure they
+    # are within range (jude)
+    #boys_enrolled = Response.objects.filter(poll__name="edtrac_boysp6_enrollment", contact__connection=connection,
+     #                                       date__range=[term_start, term_end])
+    boys_enrolled = Response.objects.filter(poll__name="edtrac_boysp6_enrollment", contact__connection=connection)
+
+    if boys_enrolled.exists():
+        boys_enrolled = int(boys_enrolled.latest('date').message.text)
+    else:
+        print "No boys"
+        boys_enrolled = 0
+
+    girls_enrolled = Response.objects.filter(poll__name="edtrac_girlsp6_enrollment", contact__connection=connection,
+                                             date__range=[term_start, term_end])
+    if girls_enrolled.exists():
+        girls_enrolled = int(girls_enrolled.latest('date').message.text)
+    else:
+        girls_enrolled = 0
+
+    return boys_enrolled , girls_enrolled
diff --git a/education/test/test_successful_feedbacks_to_polls.py b/education/test/test_successful_feedbacks_to_polls.py
new file mode 100644
index 0000000..a4100e6
--- /dev/null
+++ b/education/test/test_successful_feedbacks_to_polls.py
@@ -0,0 +1,132 @@
+# vim: ai ts=4 sts=4 et sw=4 encoding=utf-8
+from datetime import datetime
+import time
+from unittest import TestCase
+import dateutils
+from django.conf import settings
+from django.contrib.auth.models import Group, User
+from education.models import schedule_script_now, EmisReporter, School, calculate_attendance_diff
+from education.test.utils import create_poll_with_reporters, create_group, create_location_type, create_location, create_school, create_emis_reporters, create_user_with_group, fake_incoming
+from poll.models import Poll
+from rapidsms.contrib.locations.models import Location, LocationType
+from rapidsms_httprouter.models import Message
+from script.models import Script, ScriptStep, ScriptProgress, ScriptSession
+from script.utils.outgoing import check_progress
+
+
+class TestSuccessfulFeedbacksToPolls(TestCase):
+
+    def setUp(self):
+        country = create_location_type("country")
+        uganda_fields = {
+            "rght": 15274,
+            "level": 0,
+            "tree_id": 1,
+            "lft": 1,
+            }
+        self.uganda = create_location("uganda", country, **uganda_fields)
+        admin_group = create_group("Admins")
+        self.admin_user = create_user_with_group("John", admin_group, self.uganda)
+
+        district = create_location_type("district")
+        kampala_fields = {
+            "rght": 10901,
+            "tree_parent": self.uganda,
+            "level": 1,
+            "tree_id": 1,
+            "lft": 10686,
+            }
+        kampala_point = {
+            "latitude": "0.3162800000",
+            "longitude": "32.5821900000"
+        }
+        self.kampala_district = create_location("Kampala", district, point=kampala_point, **kampala_fields)
+        self.kampala_school = create_school("St. Joseph's", self.kampala_district)
+        self.head_teacher_group = create_group("Head Teachers")
+        self.emis_reporter1 = create_emis_reporters("dummy1", self.kampala_district, self.kampala_school, 12345,
+                                                    self.head_teacher_group)
+        self.emis_reporter1.grade ='P3'
+        self.emis_reporter1.save()
+        self.emis_reporter2 = create_emis_reporters("dummy2", self.kampala_district, self.kampala_school, 12346,
+                                                    self.head_teacher_group)
+        self.emis_reporter2.grade ='P3'
+        self.emis_reporter2.save()
+
+        self.p3_boys_absent_poll = create_poll_with_reporters("edtrac_boysp3_attendance", "How many P3 boys are at school today?",
+                                                              Poll.TYPE_NUMERIC, self.admin_user,
+                                                              [self.emis_reporter1, self.emis_reporter2])
+        self.p3_girls_absent_poll = create_poll_with_reporters("edtrac_girlsp3_attendance", "How many P3 girls are at school today?",
+                                                              Poll.TYPE_NUMERIC, self.admin_user,
+                                                              [self.emis_reporter1, self.emis_reporter2])
+
+        self.teachers_weekly_script = Script.objects.create(name='Revised P3 Teachers Weekly Script',
+                                            slug='edtrac_p3_teachers_weekly')
+        self.p3_boys_attendance_step = ScriptStep.objects.create(script=self.teachers_weekly_script, poll=self.p3_boys_absent_poll,
+                                                   order=0, rule=ScriptStep.WAIT_MOVEON, start_offset=0,
+                                                   giveup_offset=7200)
+        self.teachers_weekly_script.steps.add(
+            self.p3_boys_attendance_step)
+        self.p3_girls_attendance_step = ScriptStep.objects.create(script=self.teachers_weekly_script, poll=self.p3_girls_absent_poll,
+                                                   order=1, rule=ScriptStep.WAIT_MOVEON, start_offset=0,
+                                                   giveup_offset=7200)
+        self.teachers_weekly_script.steps.add(
+            self.p3_girls_attendance_step)
+
+        self.p3_boys_enroll_poll = create_poll_with_reporters("edtrac_boysp3_enrollment", "How many boys are enrolled in P3 this term?",
+                                                               Poll.TYPE_NUMERIC, self.admin_user,
+                                                               [self.emis_reporter1])
+        self.p3_girls_enroll_poll = create_poll_with_reporters("edtrac_girlsp3_enrollment", "How many girls are enrolled in P3 this term?",
+                                                               Poll.TYPE_NUMERIC, self.admin_user,
+                                                               [self.emis_reporter1])
+
+        self.head_teachers_termly_script = Script.objects.create(name='P3 Enrollment Headteacher Termly Script',
+                                                            slug='edtrac_p3_enrollment_headteacher_termly')
+        self.head_teachers_termly_script.steps.add(
+            ScriptStep.objects.create(script=self.head_teachers_termly_script, poll=self.p3_boys_enroll_poll, order=0,
+                                      rule=ScriptStep.WAIT_MOVEON, start_offset=0, giveup_offset=7200 ))
+
+        self.head_teachers_termly_script.steps.add(
+            ScriptStep.objects.create(script=self.head_teachers_termly_script, poll=self.p3_girls_enroll_poll, order=1,
+                                      rule=ScriptStep.WAIT_MOVEON, start_offset=0, giveup_offset=7200 ))
+        settings.SCHOOL_TERM_START = dateutils.increment(datetime.today(),weeks=-4)
+        settings.SCHOOL_TERM_END = dateutils.increment(datetime.today(),weeks=8)
+
+
+    def test_should_check_increment_in_outgoing_msg_count_on_all_responses_received(self):
+        schedule_script_now(grp=self.head_teacher_group.name,slug = self.teachers_weekly_script.slug)
+        check_progress(self.teachers_weekly_script)
+        fake_incoming("4",self.emis_reporter1)#response to p3 boys poll
+        check_progress(self.teachers_weekly_script)
+        self.assertEqual(2,Message.objects.filter(direction='O',connection=self.emis_reporter1.connection_set.all()[0]).count())
+        fake_incoming("3",self.emis_reporter1)#response to p3 girls poll
+        check_progress(self.teachers_weekly_script)
+        self.assertEqual(3,Message.objects.filter(direction='O',connection=self.emis_reporter1.connection_set.all()[0]).count())
+
+    def test_should_calculate_difference_in_attendance_for_this_and_past_week(self):
+        schedule_script_now(grp=self.head_teacher_group.name,slug=self.head_teachers_termly_script.slug)
+        check_progress(self.head_teachers_termly_script)
+        fake_incoming("10",self.emis_reporter1)
+        check_progress(self.head_teachers_termly_script)
+        fake_incoming("10",self.emis_reporter1)
+        schedule_script_now(grp=self.head_teacher_group.name,slug = self.teachers_weekly_script.slug)
+        check_progress(self.teachers_weekly_script)
+        fake_incoming("4",self.emis_reporter1)#response to p3 boys poll
+        progress = ScriptProgress.objects.create(script=self.teachers_weekly_script,connection=self.emis_reporter1.connection_set.all()[0],step=self.p3_boys_attendance_step)
+        attd_diff = calculate_attendance_diff(self.emis_reporter1.connection_set.all()[0],progress)
+        self.assertEqual(40,attd_diff['boysp3'][0])
+        self.assertEqual("improved",attd_diff['boysp3'][1])
+
+
+    def tearDown(self):
+        Message.objects.all().delete()
+        ScriptProgress.objects.all().delete()
+        ScriptStep.objects.all().delete()
+        ScriptSession.objects.all().delete()
+        Script.objects.all().delete()
+        Poll.objects.all().delete()
+        EmisReporter.objects.all().delete()
+        Location.objects.all().delete()
+        LocationType.objects.all().delete()
+        School.objects.all().delete()
+        User.objects.all().delete()
+        Group.objects.all().delete()
-- 
1.7.5.4

